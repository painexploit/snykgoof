name: Example workflow for Node using Snyk
on: push
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif
      - name: Read and Process SARIF file with jq
        id: process_sarif
        run: |
          rules=$(jq '.runs[0].tool.driver.rules' snyk.sarif)
          results=$(jq '.runs[0].results' snyk.sarif)
          echo "rules=$rules" >> $GITHUB_ENV
          echo "results=$results" >> $GITHUB_ENV
      - name: Initialize Counters and Storage for Vulnerabilities
        run: >
          echo "total_vulnerabilities=0" >> $GITHUB_ENV
      
          echo "high_vulnerabilities=[]" >> $GITHUB_ENV
      
          echo "medium_vulnerabilities=[]" >> $GITHUB_ENV
      
          echo "low_vulnerabilities=[]" >> $GITHUB_ENV
      
      
          echo "severity_mapping='{\"error\":\"High\", \"warning\":\"Medium\",
          \"note\":\"Low\"}'" >> $GITHUB_ENV
      - name: Find Matches and Categorize Vulnerabilities
        run: |
          rules=$(echo $rules | jq -c '.[]')
          results=$(echo $results | jq -c '.[]')
      
          total_vulnerabilities=0
          high_vulnerabilities=[]
          medium_vulnerabilities=[]
          low_vulnerabilities=[]
      
          severity_mapping=$(echo $severity_mapping | jq -c)
      
          for rule in $rules; do
            rule_id=$(echo $rule | jq -r '.id')
            rule_severity=$(echo $severity_mapping | jq -r --arg level "$(echo $rule | jq -r '.defaultConfiguration.level')" '.[$level] // "Unknown"')
            rule_description=$(echo $rule | jq -r '.shortDescription.text')
            
            for result in $results; do
              if [ "$(echo $result | jq -r '.ruleId')" == "$rule_id" ]; then
                result_severity=$(echo $severity_mapping | jq -r --arg level "$(echo $result | jq -r '.level')" '.[$level] // "Unknown"')
                
                locations=$(echo $result | jq -c '.locations[]')
                for location in $locations; do
                  path=$(echo $location | jq -r '.physicalLocation.artifactLocation.uri')
                  line=$(echo $location | jq -r '.physicalLocation.region.startLine')
      
                  vulnerability=$(jq -n \
                    --arg ruleName "$rule_description" \
                    --arg path "$path" \
                    --argjson line "$line" \
                    --arg severity "$result_severity" \
                    '{ruleName: $ruleName, path: $path, line: $line, severity: $severity}')
      
                  if [ "$result_severity" == "High" ]; then
                    high_vulnerabilities=$(echo $high_vulnerabilities | jq --argjson vulnerability "$vulnerability" '. + [$vulnerability]')
                  elif [ "$result_severity" == "Medium" ]; then
                    medium_vulnerabilities=$(echo $medium_vulnerabilities | jq --argjson vulnerability "$vulnerability" '. + [$vulnerability]')
                  elif [ "$result_severity" == "Low" ]; then
                    low_vulnerabilities=$(echo $low_vulnerabilities | jq --argjson vulnerability "$vulnerability" '. + [$vulnerability]')
                  fi
      
                  total_vulnerabilities=$((total_vulnerabilities + 1))
                done
              fi
            done
          done
      
          echo "total_vulnerabilities=$total_vulnerabilities" >> $GITHUB_ENV
          echo "high_vulnerabilities=$high_vulnerabilities" >> $GITHUB_ENV
          echo "medium_vulnerabilities=$medium_vulnerabilities" >> $GITHUB_ENV
          echo "low_vulnerabilities=$low_vulnerabilities" >> $GITHUB_ENV
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL }}'
          TOTAL_VULNERABILITIES: '${{ env.total_vulnerabilities }}'
          HIGH_VULNERABILITIES: '${{ env.high_vulnerabilities }}'
          MEDIUM_VULNERABILITIES: '${{ env.medium_vulnerabilities }}'
          LOW_VULNERABILITIES: '${{ env.low_vulnerabilities }}'
        run: >
          high_vulns=$(echo $HIGH_VULNERABILITIES | jq -r '.[] | "Path: \(.path),
          Line: \(.line)"')
      
          medium_vulns=$(echo $MEDIUM_VULNERABILITIES | jq -r '.[] | "Path: \(.path),
          Line: \(.line)"')
      
          low_vulns=$(echo $LOW_VULNERABILITIES | jq -r '.[] | "Path: \(.path), Line:
          \(.line)"')
      
      
          payload=$(jq -n \
            --arg total_vulnerabilities "$TOTAL_VULNERABILITIES" \
            --arg high_vulns "$high_vulns" \
            --arg medium_vulns "$medium_vulns" \
            --arg low_vulns "$low_vulns" \
            '{
              text: "Snyk Scan Report",
              attachments: [
                {
                  title: "Total Vulnerabilities",
                  text: $total_vulnerabilities
                },
                {
                  title: "High Vulnerabilities",
                  text: $high_vulns
                },
                {
                  title: "Medium Vulnerabilities",
                  text: $medium_vulns
                },
                {
                  title: "Low Vulnerabilities",
                  text: $low_vulns
                }
              ]
            }')
      
          curl -X POST -H 'Content-type: application/json' --data "$payload"
          $SLACK_WEBHOOK_URL
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      
